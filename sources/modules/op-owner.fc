() op_change_address(int value, slice in_msg) impure {

    ;; Parse parameters
    var id = in_msg~load_uint(8);
    var new_address = in_msg~load_msg_addr();
    in_msg.end_parse();

    ;; Update address
    if (id == 0) {
        ctx_owner = new_address;
    } elseif (id == 1) {
        ctx_controller = new_address;
    } else {
        throw(error::invalid_message());
    }

    ;; Persist
    store_base_data();
}

() op_owner(int flags, int value, slice in_msg) impure {
    
    ;; Ignore bounced
    if (flags & 1) {
        return ();
    }

    ;; Check value
    throw_unless(error::invalid_message(), value >= params::min_op());

    ;; Parse operation
    int op = in_msg~load_uint(32);
    int is_text = op == 0;
    if (op == 0) {

        ;; Query ID
        ctx_query_id = 0;

        ;; Op
        op = in_msg~parse_text_command();
    } else {

        ;; Query ID
        int query_id = in_msg~load_uint(64);
        ctx_query_id = query_id;
        throw_unless(error::invalid_message(), ctx_query_id > 0);

        ;; Gas Limit
        int gas_limit = in_msg~load_coins();
        set_gas_limit(gas_limit);
    }

    ;; Upgrade
    if (op == op::upgrade()) {
        op_upgrade(value, in_msg);
        return ();
    }

    ;; Update
    if (op == op::update()) {
        op_update(value, in_msg);
        return ();
    }

    ;; Add stake
    if (op == op::stake_deposit()) {
        op_deposit(owner_id(), value);
        return ();
    }

    ;; Withdraw stake
    if (op == op::stake_withdraw()) {
        int stake = 0;
        if (~ is_text) {
            stake = in_msg~load_coins();
            in_msg.end_parse();
        }
        op_withdraw(owner_id(), value, stake);
        return ();
    }

    ;; Recover stake
    if (op == op::stake_recover()) {
        load_validator_data();
        op_stake_manual_recover(value);
        return ();
    }

    ;; Donate stake
    if (op == op::donate()) {
        op_donate(value);
        return ();
    }

    ;; Change controller
    if (op == op::change_address()) {
        op_change_address(value, in_msg);
        return ();
    }

    ;; Withdraw unowned
    if (op == op::withdraw_unowned()) {
        op_withdraw_unowned(value, in_msg, ctx_owner, true);
        return ();
    }

    ;; Unknown message
    throw(error::invalid_message());
}